{"version":3,"sources":["components/Container/Container.tsx","components/Main/Main.tsx","components/Edits/CreateNew.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLocalData","JSON","parse","localStorage","getItem","setLocalData","setItem","stringify","state","container_list","listContainers","map","ele","index","react_default","a","createElement","className","type","key","name","itemsnum","container_num","setState","length","id","Component","Main","components_Container_Container","react_router_dom","to","CreateNew","tmpitems","items","handleChange","bind","assertThisInitialized","handleSubmit","keyPress","event","keyCode","target","value","newItems","push","stateName","defineProperty","preventDefault","Fragment","onSubmit","onChange","placeholder","onKeyDown","App","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3c7379cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Container.css';\n\n\ntype container_temp = {\n        name: string,\n        type: string,\n        itemsnum: number,\n}\ntype MyState = {\n    container_num: number;\n    \n    container_list: container_temp[]\n}\n\nclass Container extends Component<{},MyState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            container_num: 0,\n            container_list: [\n            //     {\n            //     name: \"Test-Container-Name\",\n            //     type: \"Test-Container-type\",\n            //     itemsnum: 5,\n            // },\n            //     {\n            //         name: \"Test-Container-Name2\",\n            //         type: \"Test-Container-type\",\n            //         itemsnum: 5,\n            //     }, {\n            //         name: \"Test-Container-Name\",\n            //         type: \"Test-Container-type\",\n            //         itemsnum: 5,\n            //     } , {\n            //         name: \"Test-Container-Name\",\n            //         type: \"Test-Container-type\",\n            //         itemsnum: 5,\n            //     },\n            ]\n        }\n    }\n    \n    componentDidMount() {\n        this.setState({container_num: this.state.container_list.length})\n    }\n    getLocalData = () => {\n        return (JSON.parse(localStorage.getItem(\"myContainers\") || ''));\n    };\n\n    setLocalData = () => (\n        localStorage.setItem(\"myContainers\", JSON.stringify(this.state.container_list))\n    );\n\n    listContainers = () => (\n        this.state.container_list.map((ele, index) =>\n            <li className={ele.type} key={index}>{ele.name}<br />{ele.itemsnum} Stuff here</li>\n    ));\n\n    render() {\n        \n        // const listConts = this.state.container_list.map((ele, index) =>\n        //     <li key={index}>{ele.name}<br />{ele.itemsnum} Stuff here</li>\n        // );\n        // console.log(this.getLocalData);\n        return (\n            <div id=\"container\">\n                You have {this.state.container_num} Containers\n                <br/>\n                    {this.state.container_num === 0 ?  <div>Create a Container!</div> : this.listContainers()}\n                    \n            </div>\n        );\n    }\n}\n\nexport default Container;","import React, { Component } from 'react';\nimport './Main.css';\nimport Container from '../Container/Container';\nimport { Link } from 'react-router-dom';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div id=\"main\">\n            <Container/>\n            <Link id=\"menu-edit-create\" to=\"/create\">+</Link>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport './CreateNew.css';\nimport { Link } from 'react-router-dom';\n\ntype stuff = {\n    name: string,\n    size?: number\n}\ntype MyState = {\n    name: string,\n    type: string,\n    tmpitems: string,\n    items: stuff[]\n}\nclass CreateNew extends Component<{}, MyState> {\n\n    constructor(props:any){\n        super(props)\n\n        this.state = {\n            name:'',\n            type: '',\n            tmpitems: '',\n            items: []\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.keyPress = this.keyPress.bind(this);\n    }\n\n    keyPress(event:any) {\n        if (event.keyCode === 13) {\n            const target = event.target;\n            if (target.name === 'tmpitems' && target.value !== '') {\n                let newItems = this.state.items;\n                newItems.push(target.value);\n                this.setState({ items: newItems });\n                this.setState({tmpitems:''});\n                \n            }\n        }\n    }\n\n    handleChange(event:any) {\n        const target = event.target;\n        const stateName:string = target.name;\n        this.setState<never>({\n            [stateName]: target.value\n        });\n        \n    }\n    \n    handleSubmit(event:any) {\n        // alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n        localStorage.setItem(this.state.name, JSON.stringify(this.state));\n        \n    }\n    render() {\n        return (\n            <>\n            <form className=\"create-new\" onSubmit={this.handleSubmit}>\n                Create Your Container\n                <label>\n                    <input \n                    type=\"text\"\n                    name=\"name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                    placeholder=\"The Container Name\"/>\n                    <input\n                        type=\"text\"\n                        name=\"type\"\n                        value={this.state.type}\n                        placeholder=\"The Container Type\"\n                        onChange={this.handleChange} />\n                    <input\n                        type=\"text\"\n                        name=\"tmpitems\"\n                        value={this.state.tmpitems}\n                        onKeyDown={this.keyPress}\n                        onChange={this.handleChange}\n                        placeholder=\"The Container Items\" />\n                    \n                        {/* <Link to=\"/\"> */}\n                        <input\n                            type=\"submit\"\n                            value=\"create\" />\n                        {/* </Link> */}\n                </label>\n            </form>\n            </>\n        );\n    }\n}\n\nexport default CreateNew;","import React from 'react';\nimport './App.css';\nimport { Route, Switch, Link} from \"react-router-dom\";\nimport Main from './components/Main/Main';\nimport CreateNew from './components/Edits/CreateNew';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link id=\"main_link\" to=\"/\">My_Stuff</Link>\n        <Switch>\n          <Route exact path=\"/\" component={Main}/>\n          <Route exact path=\"/create\" component={CreateNew}/>\n        </Switch>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}